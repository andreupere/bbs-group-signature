package cat.uib.secom.crypto.sig.bbs.core.generators;

import it.unisa.dia.gas.jpbc.Element;

import org.spongycastle.crypto.AsymmetricCipherKeyPair;
import org.spongycastle.crypto.AsymmetricCipherKeyPairGenerator;
import org.spongycastle.crypto.KeyGenerationParameters;

import cat.uib.secom.crypto.sig.bbs.core.impl.keys.BBSGroupManagerPrivateElementsImpl;
import cat.uib.secom.crypto.sig.bbs.core.impl.keys.BBSGroupPublicKeyImpl;
import cat.uib.secom.crypto.sig.bbs.core.impl.keys.BBSUserPrivateKeyImpl;
import cat.uib.secom.crypto.sig.bbs.core.parameters.BBSKeyGenerationParameters;
import cat.uib.secom.crypto.sig.bbs.core.parameters.BBSParameters;
import cat.uib.secom.utils.pairing.ElementWrapper;


/**
 * @author Andreu Pere
 * 
 * Key pair generation object. It uses AsymmetricCipherKeyPairGenerator from bouncy castle library
 * First, the object must be initialized and then you can call generateKeyPair() method.
 * */
public class BBSKeyPairGenerator implements AsymmetricCipherKeyPairGenerator {
	
	private BBSKeyGenerationParameters bbsKeyGenerationParameters;
	private BBSParameters bbsParameters;
	
	
	/**
	 * Initialization object. It loads previously generated bbsParameters
	 * 
	 * @param parameters parameters for key generation loaded from KeyGenerationParameters
	 * @see KeyGenerationParameters
	 * 
	 * */
	public void init(KeyGenerationParameters parameters) {
		bbsKeyGenerationParameters = (BBSKeyGenerationParameters) parameters;
		bbsParameters = bbsKeyGenerationParameters.getBBSParameters();
	}
	
	
	
	/**
	 * Generates the key pair for each user. Here, the public group key and private group manager elements
	 * are already generated by a previous step. This method generates one private key for one user i.
	 * It is the KEYGEN(n) algorithm from paper
	 * 
	 * @see AsymmetricCipherKeyPair
	 * 
	 * @return AsymmetricCipherKeyPair
	 * */
	public AsymmetricCipherKeyPair generateKeyPair() {
				
		BBSGroupPublicKeyImpl groupPublicKey = bbsKeyGenerationParameters.getBBSGroupPublicKey();
		BBSGroupManagerPrivateElementsImpl managerPrivate = bbsKeyGenerationParameters.getBBSGroupManagerPrivateElements();
		Element g1 = groupPublicKey.getG1().getElement().getImmutable();
		Element gamma = managerPrivate.getGamma().getElement().getImmutable();
		
		
		Element x = bbsParameters.getPairing().getZr().newRandomElement().getImmutable();
		

		Element exp = gamma.add(x).getImmutable();
		exp = exp.invert().getImmutable();
		Element a = g1.powZn(exp).getImmutable();
		BBSUserPrivateKeyImpl userPrivateKey = new BBSUserPrivateKeyImpl( new ElementWrapper ( a ), 
																  		  new ElementWrapper (x ) );
		
		return new AsymmetricCipherKeyPair(groupPublicKey, userPrivateKey);
	}

	

}
