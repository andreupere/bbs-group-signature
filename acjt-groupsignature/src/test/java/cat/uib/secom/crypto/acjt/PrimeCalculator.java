package cat.uib.secom.crypto.acjt;

import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.Random;

import org.bouncycastle.util.BigIntegers;
import org.junit.Test;

public class PrimeCalculator {

	@Test
	public void test() {
		Integer sigma2_1 = 4448; // lambda1_1 + 2;
		Integer sigma1_1 = 9224; //epsilon_1 + (sigma2_1 + k_1)  + 2;
		BigInteger exponentSigma1 = (new BigInteger("2").pow(sigma1_1));
		BigInteger exponentSigma2 = (new BigInteger("2").pow(sigma2_1));
		BigInteger gammaRangeBottom = exponentSigma1.subtract(exponentSigma2);
		BigInteger gammaRangeUp = exponentSigma1.add(exponentSigma2);
		
		System.out.println("num bits bottom: " + gammaRangeBottom.bitLength());
		System.out.println("num bits up:" + gammaRangeUp.bitLength());
		
		// from http://primes.utm.edu/primes/page.php?id=65151 [2774 digits; 9209.68 bits -> 9210 bits (redondejat) -> 9212 bits (multiple de 8)]
		String prime1 = "1067 9483888479 1432840440 3477399245 8612040696 3149918394 7871030156 3678491575 7692161622 8148194058 4974585806 4822213113 3342374263 9008674802 9173426863 9263560579 0806292907 7594224026 3403880824 6300075316 2639900784 1247740834 0876015685 9459726915 6625080487 4655185572 2006630647 3419893004 7127040940 2447733798 9442586723 1280568491 4125344924 6494426135 3326334711 2080719557 0775738370 9332544098 0512904052 8260334583 7624594846 9193863033 8228494156 7814345353 8066882118 7689614847 5278458207 0451473832 4206651979 3488485638 0866358617 5700045530 0792458963 2412053545 6561768441 5160254511 0137245526 7102220894 2572244043 0096106891 4650740095 0288590206 3726154256 4245361577 4973876737 2155341410 4950030348 3257206612 6530345947 6552894142 7795084498 8378400931 0630768169 2844604291 7890050815 2209313396 2038441515 3719168493 1098201870 8947185885 0385046794 4436478010 1002794398 5550784299 4452431904 2841936880 3662060651 0408059111 9820224679 4816840135 7131611304 4919650775 0277995507 3089827500 1692802802 0918349071 3602218545 7005969009 7653070951 1081673755 1773252870 9682114668 4548529274 5688737528 0507546301 1716685949 8368394249 6203544725 9953794744 6531098816 0174833644 4613923864 2801647430 2356596177 3887636305 7090574843 6088571547 1977471275 3838572530 5301338644 4001801484 9705351994 0691328842 4496248071 9580738068 1364505323 0135697565 2033129499 6072585701 0308377053 0157090902 5326497675 0056466236 2370367021 6597308818 5690116414 3222036189 5974239128 1244747196 9335952512 1972323326 2456156245 8536491143 4830031574 2682199202 3912725647 0723798552 1131852770 6596427394 4004841625 8498884378 6908785568 7964444338 7241566208 0786180886 2578949489 9886162820 8867765466 6979958869 8275399032 5418504612 6969311497 0305324125 2173530793 4796202561 8789254030 5790755307 7409844776 3578390581 8553559433 4807839417 1517723900 6917676017 4397729177 2075186589 7946088251 7544729659 5785318005 7324058789 9097234119 9576937107 8415158980 9918618640 9521137123 0556106132 4257995507 8914723953 2914181135 1443255433 0461900080 2187059992 2289559163 9651541648 5643807711 3256311740 2126612062 3447772084 4127971227 5343902361 5907243050 0178541620 3078274574 7070268581 4976956685 7055089507 9185696798 2663695616 3922700223 8434006438 0634839598 2849790039 6931608121 4029381571 6547365927 9227094402 1605568761 6016887861 6193700755 6321146592 8626291308 4725408588 1947294437 9640308875 4525195779 8461441645 0112030524 8061004477 0860097127 5713612908 5072193794 8666526761 1206899104 4155212380 7223962021 1729031394 4894040818 5643979791 7691274103 5932050688 4136675946 4414955323 1379765962 3483488198 6056714799 4609719468 2963530650 6400315342 0115488921 6935208902 9891227297 5413040173 4334555061 2100783181 6668305480 2805773770 2167548640 5472960792 6123129522 2990369098 9839021303 8594255483 0842263049 7819549549 0611644677 3714281066 0366543487 4093275766 9959275506 3366209583 6738611757 2337777795 4212227549 2430639580 1893331692 9402704055 5462264472 1101709608 7209328101";
		// from http://primes.utm.edu/primes/page.php?id=29992 [2811 digits;  9332.52 bits -> 9333 bits (redondejat) -> 9336 bits (multiple de 8)]
		//String prime1 = "1 1632076146 1972315536 5096662400 0915104283 1193433643 0866040743 7224933856 0674812886 7304396855 2788918495 1106854497 5004139946 0719515028 0098347330 7340151413 5639414317 5269822967 6337439797 5565328476 5812333335 4646417401 6370197280 3929961766 1913173223 6823707490 5758990550 1500050694 5899485195 1242661600 7401058129 0366055763 4877371827 0271802457 2296189895 8009402776 7116126386 4961026526 0583732190 4858017182 0779753376 4639304994 4539149716 3291462076 8127657756 0205880762 9796675803 7751592034 1473166153 3820996146 5440022379 3325621425 7421390624 6576968142 9422110311 4430821928 7906338679 7136137999 7311023387 9357909785 0280044135 0324177390 3958658446 8669765751 8041329059 9778708594 6324971214 2865466544 6139259135 8156516304 9915411681 8217092090 9553991642 3582055285 4642344052 7350143065 3910561024 7249971272 5187074741 8655682914 4878420897 8948014608 2918976906 2852935391 3025762673 2981164298 1133069369 4423770516 1356876275 7286129938 8447487985 9566243179 1573440565 5415591027 1189320973 6113481498 6608989663 5467451475 4241219634 7294471920 0917242479 0232250928 1538714057 5615070961 5299397361 4217740038 4855842191 0864012037 6501223369 8376256325 7202325231 1037520969 5471384831 2358607667 2163089633 7671467599 1725211035 7738097668 7392975944 6079054888 9846343465 5037262866 5113205166 2026691785 4047128900 3530159820 3954689851 9650105141 1886582645 7034843635 6565579345 6691404618 7020493820 5523272210 2025790111 1320536755 7468611403 2066765653 4506666998 4864993724 2464526633 0552788095 1312977050 7793331411 0710536502 3119834938 7304895289 6463492001 3447513536 4566348464 2699048403 4459804765 1541549373 1330104640 0618253868 6978731826 2244701975 6848436787 6270459437 3317566686 3070359467 2964885153 2224237644 4057337071 9765912825 3675233192 4580695602 3053268852 5008943216 4310724417 7860810062 7849345653 2235299263 7025797276 6398432183 0737488737 7389058530 9674017413 9898534307 4458865466 8675528739 3359559544 5616027615 9519796106 5894148926 0118873276 7805513873 5667942926 2010132067 8659453015 8976559826 9472986224 9517212852 1864798801 1611671151 1364885915 7975008336 9881911771 3201843841 1784548716 3576903798 6614058013 8417996914 9349080641 4301124589 6871247303 2309747297 2843466316 1386390140 4765899731 0448950659 1141490554 1468410799 4903018473 6926416390 4566681372 7923617570 3608581644 5572836761 6181792459 8519913061 9470910341 2671121951 1573254351 0996228508 4941630278 6525026042 0378676765 4213332296 9982661926 9422073510 6901517576 6620369745 1027694389 1973605348 4540978209 1203119647 0015956203 4142732427 1721697979 5306444666 2945908452 8277864224 5431101682 5245286796 1144996416 4872242559 8913013466 4871467676 8977009829 1147812647 8537434938 6441434004 7031422213 1672242682 6109207467 1208314040 4581499631 8447153679 1810555934 3051773724 3731500778 2443858205 2784352859 3067943558 8523567734 6956270373 8678674311 4852872233 2371768014 4092833713 3908954493 3184641998 9387901021 5376500682 9274781790 7969702333 3324408674 0868749240 3885026851 7873954417 4329780009";
		prime1 = prime1.replace(" ", "");
		System.out.println(prime1.length());
		System.out.println(prime1);
		
		
		BigInteger prime = new BigInteger(prime1, 10);
		System.out.println("length: " + prime.bitLength() + " bits");
		System.out.println("is probably prime? " + prime.isProbablePrime(1));
		if (prime.compareTo(gammaRangeBottom) == 1) {
			if (prime.compareTo(gammaRangeUp) == -1) {
				System.out.println("In inside the range");
			}
			else
				System.out.println("greater than");
		}
		else
			System.out.println("less than");
		
		
//		BigInteger ei = null;
//		boolean prime = false;
//		while(!prime) {
//			ei = BigIntegers.createRandomInRange(gammaRangeBottom, gammaRangeUp, new SecureRandom());
//			//Double eiDouble = gammaRangeBottom.intValue() + (Math.random() * ((gammaRangeUp.intValue() - gammaRangeBottom.intValue())));
//			//System.out.println(eiDouble);
//			//System.out.println(ei);
//			prime = ei.isProbablePrime(1);
//		}
//		System.out.println(ei);
	}
	
}
